// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	Models "search-engine/pkg/Models"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// PageService is an autogenerated mock type for the PageService type
type PageService struct {
	mock.Mock
}

// AllPagesInCollection provides a mock function with given fields:
func (_m *PageService) AllPagesInCollection() ([]Models.Webpage, error) {
	ret := _m.Called()

	var r0 []Models.Webpage
	if rf, ok := ret.Get(0).(func() []Models.Webpage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Models.Webpage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: keys
func (_m *PageService) Search(keys []string) ([]Models.Webpage, error) {
	ret := _m.Called(keys)

	var r0 []Models.Webpage
	if rf, ok := ret.Get(0).(func([]string) []Models.Webpage); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Models.Webpage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadWebpage provides a mock function with given fields: webpage
func (_m *PageService) UploadWebpage(webpage *Models.Webpage) (*mongo.InsertOneResult, error) {
	ret := _m.Called(webpage)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(*Models.Webpage) *mongo.InsertOneResult); ok {
		r0 = rf(webpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Models.Webpage) error); ok {
		r1 = rf(webpage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPageService creates a new instance of PageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPageService(t mockConstructorTestingTNewPageService) *PageService {
	mock := &PageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
